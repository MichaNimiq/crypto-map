/* tslint:disable */
/* eslint-disable */
/**
 * Crypto Map API documentation
 * The Shop Directory API is serves a list of shops that accept crypto as a payment method.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { PickupPlaceInformationGeometryLocation } from './PickupPlaceInformationGeometryLocation';
import {
    PickupPlaceInformationGeometryLocationFromJSON,
    PickupPlaceInformationGeometryLocationFromJSONTyped,
    PickupPlaceInformationGeometryLocationToJSON,
} from './PickupPlaceInformationGeometryLocation';

/**
 * 
 * @export
 * @interface PickupPlaceInformationGeometryViewport
 */
export interface PickupPlaceInformationGeometryViewport {
    /**
     * 
     * @type {PickupPlaceInformationGeometryLocation}
     * @memberof PickupPlaceInformationGeometryViewport
     */
    northeast: PickupPlaceInformationGeometryLocation;
    /**
     * 
     * @type {PickupPlaceInformationGeometryLocation}
     * @memberof PickupPlaceInformationGeometryViewport
     */
    southwest: PickupPlaceInformationGeometryLocation;
}

/**
 * Check if a given object implements the PickupPlaceInformationGeometryViewport interface.
 */
export function instanceOfPickupPlaceInformationGeometryViewport(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "northeast" in value;
    isInstance = isInstance && "southwest" in value;

    return isInstance;
}

export function PickupPlaceInformationGeometryViewportFromJSON(json: any): PickupPlaceInformationGeometryViewport {
    return PickupPlaceInformationGeometryViewportFromJSONTyped(json, false);
}

export function PickupPlaceInformationGeometryViewportFromJSONTyped(json: any, ignoreDiscriminator: boolean): PickupPlaceInformationGeometryViewport {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'northeast': PickupPlaceInformationGeometryLocationFromJSON(json['northeast']),
        'southwest': PickupPlaceInformationGeometryLocationFromJSON(json['southwest']),
    };
}

export function PickupPlaceInformationGeometryViewportToJSON(value?: PickupPlaceInformationGeometryViewport | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'northeast': PickupPlaceInformationGeometryLocationToJSON(value.northeast),
        'southwest': PickupPlaceInformationGeometryLocationToJSON(value.southwest),
    };
}

