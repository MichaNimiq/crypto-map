/* tslint:disable */
/* eslint-disable */
/**
 * Crypto Map API documentation
 * The Shop Directory API is serves a list of shops that accept crypto as a payment method.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CryptoCurrency } from './CryptoCurrency';
import {
    CryptoCurrencyFromJSON,
    CryptoCurrencyFromJSONTyped,
    CryptoCurrencyToJSON,
} from './CryptoCurrency';
import type { Pickup } from './Pickup';
import {
    PickupFromJSON,
    PickupFromJSONTyped,
    PickupToJSON,
} from './Pickup';

/**
 * 
 * @export
 * @interface CryptoLocation
 */
export interface CryptoLocation {
    /**
     * 
     * @type {number}
     * @memberof CryptoLocation
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof CryptoLocation
     */
    label: string;
    /**
     * 
     * @type {string}
     * @memberof CryptoLocation
     */
    description: string | null;
    /**
     * 
     * @type {string}
     * @memberof CryptoLocation
     */
    website: string | null;
    /**
     * 
     * @type {string}
     * @memberof CryptoLocation
     */
    email: string | null;
    /**
     * 
     * @type {string}
     * @memberof CryptoLocation
     */
    phone: string | null;
    /**
     * 
     * @type {string}
     * @memberof CryptoLocation
     */
    zip: string;
    /**
     * 
     * @type {string}
     * @memberof CryptoLocation
     */
    city: string;
    /**
     * 
     * @type {string}
     * @memberof CryptoLocation
     */
    country: string;
    /**
     * 
     * @type {boolean}
     * @memberof CryptoLocation
     */
    digital_goods: boolean;
    /**
     * 
     * @type {string}
     * @memberof CryptoLocation
     */
    created_at: string;
    /**
     * 
     * @type {string}
     * @memberof CryptoLocation
     */
    updated_at: string;
    /**
     * 
     * @type {string}
     * @memberof CryptoLocation
     */
    address_line_1: string;
    /**
     * 
     * @type {string}
     * @memberof CryptoLocation
     */
    address_line_2: string;
    /**
     * 
     * @type {string}
     * @memberof CryptoLocation
     */
    address_line_3: string;
    /**
     * 
     * @type {Array<Pickup>}
     * @memberof CryptoLocation
     */
    pickups: Array<Pickup>;
    /**
     * 
     * @type {Array<Pickup>}
     * @memberof CryptoLocation
     */
    shippings: Array<Pickup>;
    /**
     * 
     * @type {Array<CryptoCurrency>}
     * @memberof CryptoLocation
     */
    currencies: Array<CryptoCurrency>;
}

/**
 * Check if a given object implements the CryptoLocation interface.
 */
export function instanceOfCryptoLocation(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "label" in value;
    isInstance = isInstance && "description" in value;
    isInstance = isInstance && "website" in value;
    isInstance = isInstance && "email" in value;
    isInstance = isInstance && "phone" in value;
    isInstance = isInstance && "zip" in value;
    isInstance = isInstance && "city" in value;
    isInstance = isInstance && "country" in value;
    isInstance = isInstance && "digital_goods" in value;
    isInstance = isInstance && "created_at" in value;
    isInstance = isInstance && "updated_at" in value;
    isInstance = isInstance && "address_line_1" in value;
    isInstance = isInstance && "address_line_2" in value;
    isInstance = isInstance && "address_line_3" in value;
    isInstance = isInstance && "pickups" in value;
    isInstance = isInstance && "shippings" in value;
    isInstance = isInstance && "currencies" in value;

    return isInstance;
}

export function CryptoLocationFromJSON(json: any): CryptoLocation {
    return CryptoLocationFromJSONTyped(json, false);
}

export function CryptoLocationFromJSONTyped(json: any, ignoreDiscriminator: boolean): CryptoLocation {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'label': json['label'],
        'description': json['description'],
        'website': json['website'],
        'email': json['email'],
        'phone': json['phone'],
        'zip': json['zip'],
        'city': json['city'],
        'country': json['country'],
        'digital_goods': json['digital_goods'],
        'created_at': json['created_at'],
        'updated_at': json['updated_at'],
        'address_line_1': json['address_line_1'],
        'address_line_2': json['address_line_2'],
        'address_line_3': json['address_line_3'],
        'pickups': ((json['pickups'] as Array<any>).map(PickupFromJSON)),
        'shippings': ((json['shippings'] as Array<any>).map(PickupFromJSON)),
        'currencies': ((json['currencies'] as Array<any>).map(CryptoCurrencyFromJSON)),
    };
}

export function CryptoLocationToJSON(value?: CryptoLocation | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'label': value.label,
        'description': value.description,
        'website': value.website,
        'email': value.email,
        'phone': value.phone,
        'zip': value.zip,
        'city': value.city,
        'country': value.country,
        'digital_goods': value.digital_goods,
        'created_at': value.created_at,
        'updated_at': value.updated_at,
        'address_line_1': value.address_line_1,
        'address_line_2': value.address_line_2,
        'address_line_3': value.address_line_3,
        'pickups': ((value.pickups as Array<any>).map(PickupToJSON)),
        'shippings': ((value.shippings as Array<any>).map(PickupToJSON)),
        'currencies': ((value.currencies as Array<any>).map(CryptoCurrencyToJSON)),
    };
}

