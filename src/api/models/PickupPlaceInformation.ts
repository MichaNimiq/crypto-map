/* tslint:disable */
/* eslint-disable */
/**
 * Crypto Map API documentation
 * The Shop Directory API is serves a list of shops that accept crypto as a payment method.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { PickupPlaceInformationAddressComponentsInner } from './PickupPlaceInformationAddressComponentsInner';
import {
    PickupPlaceInformationAddressComponentsInnerFromJSON,
    PickupPlaceInformationAddressComponentsInnerFromJSONTyped,
    PickupPlaceInformationAddressComponentsInnerToJSON,
} from './PickupPlaceInformationAddressComponentsInner';
import type { PickupPlaceInformationGeometry } from './PickupPlaceInformationGeometry';
import {
    PickupPlaceInformationGeometryFromJSON,
    PickupPlaceInformationGeometryFromJSONTyped,
    PickupPlaceInformationGeometryToJSON,
} from './PickupPlaceInformationGeometry';
import type { PickupPlaceInformationPhotosInner } from './PickupPlaceInformationPhotosInner';
import {
    PickupPlaceInformationPhotosInnerFromJSON,
    PickupPlaceInformationPhotosInnerFromJSONTyped,
    PickupPlaceInformationPhotosInnerToJSON,
} from './PickupPlaceInformationPhotosInner';
import type { PickupPlaceInformationPlusCode } from './PickupPlaceInformationPlusCode';
import {
    PickupPlaceInformationPlusCodeFromJSON,
    PickupPlaceInformationPlusCodeFromJSONTyped,
    PickupPlaceInformationPlusCodeToJSON,
} from './PickupPlaceInformationPlusCode';

/**
 * 
 * @export
 * @interface PickupPlaceInformation
 */
export interface PickupPlaceInformation {
    /**
     * 
     * @type {Array<PickupPlaceInformationAddressComponentsInner>}
     * @memberof PickupPlaceInformation
     */
    address_components: Array<PickupPlaceInformationAddressComponentsInner>;
    /**
     * 
     * @type {string}
     * @memberof PickupPlaceInformation
     */
    adr_address: string;
    /**
     * 
     * @type {string}
     * @memberof PickupPlaceInformation
     */
    business_status: string;
    /**
     * 
     * @type {string}
     * @memberof PickupPlaceInformation
     */
    formatted_address: string;
    /**
     * 
     * @type {string}
     * @memberof PickupPlaceInformation
     */
    formatted_phone_number: string;
    /**
     * 
     * @type {PickupPlaceInformationGeometry}
     * @memberof PickupPlaceInformation
     */
    geometry: PickupPlaceInformationGeometry;
    /**
     * 
     * @type {string}
     * @memberof PickupPlaceInformation
     */
    icon: string;
    /**
     * 
     * @type {string}
     * @memberof PickupPlaceInformation
     */
    icon_background_color: string;
    /**
     * 
     * @type {string}
     * @memberof PickupPlaceInformation
     */
    icon_mask_base_uri: string;
    /**
     * 
     * @type {string}
     * @memberof PickupPlaceInformation
     */
    international_phone_number: string;
    /**
     * 
     * @type {string}
     * @memberof PickupPlaceInformation
     */
    name: string;
    /**
     * 
     * @type {Array<PickupPlaceInformationPhotosInner>}
     * @memberof PickupPlaceInformation
     */
    photos?: Array<PickupPlaceInformationPhotosInner> | null;
    /**
     * 
     * @type {string}
     * @memberof PickupPlaceInformation
     */
    place_id: string;
    /**
     * 
     * @type {PickupPlaceInformationPlusCode}
     * @memberof PickupPlaceInformation
     */
    plus_code: PickupPlaceInformationPlusCode;
    /**
     * 
     * @type {number}
     * @memberof PickupPlaceInformation
     */
    price_level: number;
    /**
     * 
     * @type {number}
     * @memberof PickupPlaceInformation
     */
    rating: number;
    /**
     * 
     * @type {string}
     * @memberof PickupPlaceInformation
     */
    reference: string;
    /**
     * 
     * @type {Array<any>}
     * @memberof PickupPlaceInformation
     */
    reviews: Array<any>;
    /**
     * 
     * @type {Array<string>}
     * @memberof PickupPlaceInformation
     */
    types: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof PickupPlaceInformation
     */
    url: string;
    /**
     * 
     * @type {number}
     * @memberof PickupPlaceInformation
     */
    user_ratings_total: number;
    /**
     * 
     * @type {number}
     * @memberof PickupPlaceInformation
     */
    utc_offset: number;
    /**
     * 
     * @type {string}
     * @memberof PickupPlaceInformation
     */
    vicinity: string;
    /**
     * 
     * @type {string}
     * @memberof PickupPlaceInformation
     */
    website: string;
}

/**
 * Check if a given object implements the PickupPlaceInformation interface.
 */
export function instanceOfPickupPlaceInformation(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "address_components" in value;
    isInstance = isInstance && "adr_address" in value;
    isInstance = isInstance && "business_status" in value;
    isInstance = isInstance && "formatted_address" in value;
    isInstance = isInstance && "formatted_phone_number" in value;
    isInstance = isInstance && "geometry" in value;
    isInstance = isInstance && "icon" in value;
    isInstance = isInstance && "icon_background_color" in value;
    isInstance = isInstance && "icon_mask_base_uri" in value;
    isInstance = isInstance && "international_phone_number" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "place_id" in value;
    isInstance = isInstance && "plus_code" in value;
    isInstance = isInstance && "price_level" in value;
    isInstance = isInstance && "rating" in value;
    isInstance = isInstance && "reference" in value;
    isInstance = isInstance && "reviews" in value;
    isInstance = isInstance && "types" in value;
    isInstance = isInstance && "url" in value;
    isInstance = isInstance && "user_ratings_total" in value;
    isInstance = isInstance && "utc_offset" in value;
    isInstance = isInstance && "vicinity" in value;
    isInstance = isInstance && "website" in value;

    return isInstance;
}

export function PickupPlaceInformationFromJSON(json: any): PickupPlaceInformation {
    return PickupPlaceInformationFromJSONTyped(json, false);
}

export function PickupPlaceInformationFromJSONTyped(json: any, ignoreDiscriminator: boolean): PickupPlaceInformation {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'address_components': ((json['address_components'] as Array<any>).map(PickupPlaceInformationAddressComponentsInnerFromJSON)),
        'adr_address': json['adr_address'],
        'business_status': json['business_status'],
        'formatted_address': json['formatted_address'],
        'formatted_phone_number': json['formatted_phone_number'],
        'geometry': PickupPlaceInformationGeometryFromJSON(json['geometry']),
        'icon': json['icon'],
        'icon_background_color': json['icon_background_color'],
        'icon_mask_base_uri': json['icon_mask_base_uri'],
        'international_phone_number': json['international_phone_number'],
        'name': json['name'],
        'photos': !exists(json, 'photos') ? undefined : (json['photos'] === null ? null : (json['photos'] as Array<any>).map(PickupPlaceInformationPhotosInnerFromJSON)),
        'place_id': json['place_id'],
        'plus_code': PickupPlaceInformationPlusCodeFromJSON(json['plus_code']),
        'price_level': json['price_level'],
        'rating': json['rating'],
        'reference': json['reference'],
        'reviews': json['reviews'],
        'types': json['types'],
        'url': json['url'],
        'user_ratings_total': json['user_ratings_total'],
        'utc_offset': json['utc_offset'],
        'vicinity': json['vicinity'],
        'website': json['website'],
    };
}

export function PickupPlaceInformationToJSON(value?: PickupPlaceInformation | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'address_components': ((value.address_components as Array<any>).map(PickupPlaceInformationAddressComponentsInnerToJSON)),
        'adr_address': value.adr_address,
        'business_status': value.business_status,
        'formatted_address': value.formatted_address,
        'formatted_phone_number': value.formatted_phone_number,
        'geometry': PickupPlaceInformationGeometryToJSON(value.geometry),
        'icon': value.icon,
        'icon_background_color': value.icon_background_color,
        'icon_mask_base_uri': value.icon_mask_base_uri,
        'international_phone_number': value.international_phone_number,
        'name': value.name,
        'photos': value.photos === undefined ? undefined : (value.photos === null ? null : (value.photos as Array<any>).map(PickupPlaceInformationPhotosInnerToJSON)),
        'place_id': value.place_id,
        'plus_code': PickupPlaceInformationPlusCodeToJSON(value.plus_code),
        'price_level': value.price_level,
        'rating': value.rating,
        'reference': value.reference,
        'reviews': value.reviews,
        'types': value.types,
        'url': value.url,
        'user_ratings_total': value.user_ratings_total,
        'utc_offset': value.utc_offset,
        'vicinity': value.vicinity,
        'website': value.website,
    };
}

