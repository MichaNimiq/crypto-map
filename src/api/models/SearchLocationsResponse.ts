/* tslint:disable */
/* eslint-disable */
/**
 * Crypto Map API documentation
 * The Shop Directory API is serves a list of shops that accept crypto as a payment method.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CryptoLocation } from './CryptoLocation';
import {
    CryptoLocationFromJSON,
    CryptoLocationFromJSONTyped,
    CryptoLocationToJSON,
} from './CryptoLocation';
import type { Link } from './Link';
import {
    LinkFromJSON,
    LinkFromJSONTyped,
    LinkToJSON,
} from './Link';

/**
 * 
 * @export
 * @interface SearchLocationsResponse
 */
export interface SearchLocationsResponse {
    /**
     * 
     * @type {Array<CryptoLocation>}
     * @memberof SearchLocationsResponse
     */
    data: Array<CryptoLocation>;
    /**
     * 
     * @type {Array<Link>}
     * @memberof SearchLocationsResponse
     */
    links: Array<Link>;
    /**
     * 
     * @type {number}
     * @memberof SearchLocationsResponse
     */
    total: number;
    /**
     * 
     * @type {number}
     * @memberof SearchLocationsResponse
     */
    from: number;
    /**
     * 
     * @type {number}
     * @memberof SearchLocationsResponse
     */
    to: number;
    /**
     * 
     * @type {number}
     * @memberof SearchLocationsResponse
     */
    last_page: number;
    /**
     * 
     * @type {string}
     * @memberof SearchLocationsResponse
     */
    last_page_url: string | null;
    /**
     * 
     * @type {string}
     * @memberof SearchLocationsResponse
     */
    first_page_url: string | null;
    /**
     * 
     * @type {number}
     * @memberof SearchLocationsResponse
     */
    current_page: number;
    /**
     * 
     * @type {string}
     * @memberof SearchLocationsResponse
     */
    next_page_url: string | null;
    /**
     * 
     * @type {string}
     * @memberof SearchLocationsResponse
     */
    path: string;
    /**
     * 
     * @type {number}
     * @memberof SearchLocationsResponse
     */
    per_page: number;
    /**
     * 
     * @type {string}
     * @memberof SearchLocationsResponse
     */
    prev_page_url: string | null;
}

/**
 * Check if a given object implements the SearchLocationsResponse interface.
 */
export function instanceOfSearchLocationsResponse(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "data" in value;
    isInstance = isInstance && "links" in value;
    isInstance = isInstance && "total" in value;
    isInstance = isInstance && "from" in value;
    isInstance = isInstance && "to" in value;
    isInstance = isInstance && "last_page" in value;
    isInstance = isInstance && "last_page_url" in value;
    isInstance = isInstance && "first_page_url" in value;
    isInstance = isInstance && "current_page" in value;
    isInstance = isInstance && "next_page_url" in value;
    isInstance = isInstance && "path" in value;
    isInstance = isInstance && "per_page" in value;
    isInstance = isInstance && "prev_page_url" in value;

    return isInstance;
}

export function SearchLocationsResponseFromJSON(json: any): SearchLocationsResponse {
    return SearchLocationsResponseFromJSONTyped(json, false);
}

export function SearchLocationsResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): SearchLocationsResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'data': ((json['data'] as Array<any>).map(CryptoLocationFromJSON)),
        'links': ((json['links'] as Array<any>).map(LinkFromJSON)),
        'total': json['total'],
        'from': json['from'],
        'to': json['to'],
        'last_page': json['last_page'],
        'last_page_url': json['last_page_url'],
        'first_page_url': json['first_page_url'],
        'current_page': json['current_page'],
        'next_page_url': json['next_page_url'],
        'path': json['path'],
        'per_page': json['per_page'],
        'prev_page_url': json['prev_page_url'],
    };
}

export function SearchLocationsResponseToJSON(value?: SearchLocationsResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'data': ((value.data as Array<any>).map(CryptoLocationToJSON)),
        'links': ((value.links as Array<any>).map(LinkToJSON)),
        'total': value.total,
        'from': value.from,
        'to': value.to,
        'last_page': value.last_page,
        'last_page_url': value.last_page_url,
        'first_page_url': value.first_page_url,
        'current_page': value.current_page,
        'next_page_url': value.next_page_url,
        'path': value.path,
        'per_page': value.per_page,
        'prev_page_url': value.prev_page_url,
    };
}

