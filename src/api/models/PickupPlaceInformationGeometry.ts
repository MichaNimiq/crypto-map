/* tslint:disable */
/* eslint-disable */
/**
 * Crypto Map API documentation
 * The Shop Directory API is serves a list of shops that accept crypto as a payment method.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { PickupPlaceInformationGeometryLocation } from './PickupPlaceInformationGeometryLocation';
import {
    PickupPlaceInformationGeometryLocationFromJSON,
    PickupPlaceInformationGeometryLocationFromJSONTyped,
    PickupPlaceInformationGeometryLocationToJSON,
} from './PickupPlaceInformationGeometryLocation';
import type { PickupPlaceInformationGeometryViewport } from './PickupPlaceInformationGeometryViewport';
import {
    PickupPlaceInformationGeometryViewportFromJSON,
    PickupPlaceInformationGeometryViewportFromJSONTyped,
    PickupPlaceInformationGeometryViewportToJSON,
} from './PickupPlaceInformationGeometryViewport';

/**
 * 
 * @export
 * @interface PickupPlaceInformationGeometry
 */
export interface PickupPlaceInformationGeometry {
    /**
     * 
     * @type {PickupPlaceInformationGeometryLocation}
     * @memberof PickupPlaceInformationGeometry
     */
    location: PickupPlaceInformationGeometryLocation;
    /**
     * 
     * @type {PickupPlaceInformationGeometryViewport}
     * @memberof PickupPlaceInformationGeometry
     */
    viewport: PickupPlaceInformationGeometryViewport;
}

/**
 * Check if a given object implements the PickupPlaceInformationGeometry interface.
 */
export function instanceOfPickupPlaceInformationGeometry(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "location" in value;
    isInstance = isInstance && "viewport" in value;

    return isInstance;
}

export function PickupPlaceInformationGeometryFromJSON(json: any): PickupPlaceInformationGeometry {
    return PickupPlaceInformationGeometryFromJSONTyped(json, false);
}

export function PickupPlaceInformationGeometryFromJSONTyped(json: any, ignoreDiscriminator: boolean): PickupPlaceInformationGeometry {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'location': PickupPlaceInformationGeometryLocationFromJSON(json['location']),
        'viewport': PickupPlaceInformationGeometryViewportFromJSON(json['viewport']),
    };
}

export function PickupPlaceInformationGeometryToJSON(value?: PickupPlaceInformationGeometry | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'location': PickupPlaceInformationGeometryLocationToJSON(value.location),
        'viewport': PickupPlaceInformationGeometryViewportToJSON(value.viewport),
    };
}

