/* tslint:disable */
/* eslint-disable */
/**
 * Crypto Map API documentation
 * The Shop Directory API is serves a list of shops that accept crypto as a payment method.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { GeoLocation } from './GeoLocation';
import {
    GeoLocationFromJSON,
    GeoLocationFromJSONTyped,
    GeoLocationToJSON,
} from './GeoLocation';
import type { PickupPlaceInformation } from './PickupPlaceInformation';
import {
    PickupPlaceInformationFromJSON,
    PickupPlaceInformationFromJSONTyped,
    PickupPlaceInformationToJSON,
} from './PickupPlaceInformation';

/**
 * 
 * @export
 * @interface Pickup
 */
export interface Pickup {
    /**
     * 
     * @type {number}
     * @memberof Pickup
     */
    id: number;
    /**
     * 
     * @type {number}
     * @memberof Pickup
     */
    shop_id: number;
    /**
     * 
     * @type {GeoLocation}
     * @memberof Pickup
     */
    geo_location: GeoLocation;
    /**
     * 
     * @type {string}
     * @memberof Pickup
     */
    created_at: string;
    /**
     * 
     * @type {string}
     * @memberof Pickup
     */
    updated_at: string;
    /**
     * 
     * @type {string}
     * @memberof Pickup
     */
    place_id: string;
    /**
     * 
     * @type {string}
     * @memberof Pickup
     */
    label: string | null;
    /**
     * 
     * @type {PickupPlaceInformation}
     * @memberof Pickup
     */
    place_information: PickupPlaceInformation;
}

/**
 * Check if a given object implements the Pickup interface.
 */
export function instanceOfPickup(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "shop_id" in value;
    isInstance = isInstance && "geo_location" in value;
    isInstance = isInstance && "created_at" in value;
    isInstance = isInstance && "updated_at" in value;
    isInstance = isInstance && "place_id" in value;
    isInstance = isInstance && "label" in value;
    isInstance = isInstance && "place_information" in value;

    return isInstance;
}

export function PickupFromJSON(json: any): Pickup {
    return PickupFromJSONTyped(json, false);
}

export function PickupFromJSONTyped(json: any, ignoreDiscriminator: boolean): Pickup {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'shop_id': json['shop_id'],
        'geo_location': GeoLocationFromJSON(json['geo_location']),
        'created_at': json['created_at'],
        'updated_at': json['updated_at'],
        'place_id': json['place_id'],
        'label': json['label'],
        'place_information': PickupPlaceInformationFromJSON(json['place_information']),
    };
}

export function PickupToJSON(value?: Pickup | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'shop_id': value.shop_id,
        'geo_location': GeoLocationToJSON(value.geo_location),
        'created_at': value.created_at,
        'updated_at': value.updated_at,
        'place_id': value.place_id,
        'label': value.label,
        'place_information': PickupPlaceInformationToJSON(value.place_information),
    };
}

