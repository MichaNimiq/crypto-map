/* tslint:disable */
/* eslint-disable */
/**
 * Crypto Map API documentation
 * The Establishments map API is serves a list of establishments that accept crypto as a payment method.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CryptoEstablishmentBaseGeoLocation } from './CryptoEstablishmentBaseGeoLocation';
import {
    CryptoEstablishmentBaseGeoLocationFromJSON,
    CryptoEstablishmentBaseGeoLocationFromJSONTyped,
    CryptoEstablishmentBaseGeoLocationToJSON,
} from './CryptoEstablishmentBaseGeoLocation';

/**
 * 
 * @export
 * @interface CryptoEstablishmentBase
 */
export interface CryptoEstablishmentBase {
    /**
     * 
     * @type {string}
     * @memberof CryptoEstablishmentBase
     */
    uuid: string;
    /**
     * 
     * @type {string}
     * @memberof CryptoEstablishmentBase
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof CryptoEstablishmentBase
     */
    category: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CryptoEstablishmentBase
     */
    currencies: Array<string>;
    /**
     * 
     * @type {CryptoEstablishmentBaseGeoLocation}
     * @memberof CryptoEstablishmentBase
     */
    geo_location: CryptoEstablishmentBaseGeoLocation;
}

/**
 * Check if a given object implements the CryptoEstablishmentBase interface.
 */
export function instanceOfCryptoEstablishmentBase(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "uuid" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "category" in value;
    isInstance = isInstance && "currencies" in value;
    isInstance = isInstance && "geo_location" in value;

    return isInstance;
}

export function CryptoEstablishmentBaseFromJSON(json: any): CryptoEstablishmentBase {
    return CryptoEstablishmentBaseFromJSONTyped(json, false);
}

export function CryptoEstablishmentBaseFromJSONTyped(json: any, ignoreDiscriminator: boolean): CryptoEstablishmentBase {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'uuid': json['uuid'],
        'name': json['name'],
        'category': json['category'],
        'currencies': json['currencies'],
        'geo_location': CryptoEstablishmentBaseGeoLocationFromJSON(json['geo_location']),
    };
}

export function CryptoEstablishmentBaseToJSON(value?: CryptoEstablishmentBase | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'uuid': value.uuid,
        'name': value.name,
        'category': value.category,
        'currencies': value.currencies,
        'geo_location': CryptoEstablishmentBaseGeoLocationToJSON(value.geo_location),
    };
}

